-- Import adventurer data from a JSON file generated by the exportadv script.
-- Script version: v0.3.0
-- For DF v0.47.05
--[====[

importadv
=============
Import adventurer data from a JSON file generated by the exportadv script.

Currently, this script imports adventurer skills, attributes, appearance, and personality.

Simply enter adventure mode with your character and run this script!

Usage::

    importadv [FILEPATH]

]====]

local args = {...}
local json = require "json"
local utils = require "utils"

function set_body_metadata(unit, body_metadata)
    print("\n-------SETTING BODY METADATA -------")
    local body = unit.body

    body.blood_max = body_metadata.blood_max
    print(string.format("blood_max set to %d.", body.blood_max))

    body.blood_count = body_metadata.blood_max
    print(string.format("blood_count set to %d.", body.blood_count))

    body.weapon_bp = body_metadata.weapon_bp
    print(string.format("weapon_bp set to %d.", body.weapon_bp))

    body.size_info.size_cur = body_metadata.size_info.size_cur
    print(string.format("size_cur set to %d.", body.size_info.size_cur))

    body.size_info.size_base = body_metadata.size_info.size_base
    print(string.format("size_base set to %d.", body.size_info.size_base))

    body.size_info.area_cur = body_metadata.size_info.area_cur
    print(string.format("area_cur set to %d.", body.size_info.area_cur))

    body.size_info.area_base = body_metadata.size_info.area_base
    print(string.format("area_base set to %d.", body.size_info.area_base))

    body.size_info.length_cur = body_metadata.size_info.length_cur
    print(string.format("length_cur set to %d.", body.size_info.length_cur))

    body.size_info.length_base = body_metadata.size_info.length_base
    print(string.format("length_base set to %d.", body.size_info.length_base))
end

function get_number_map_entries(map)
    count = 0
    for _ in pairs(map) do
        count = count + 1
    end
    return count
end

function set_vector_to_map(vector, map)
    map_size = get_number_map_entries(map)
    if #vector ~= map_size then
        vector:resize(map_size)
    end
    for i = 0, #vector - 1 do
        vector[i] = map[tostring(i)]
    end
end

function set_appearance(unit, appearance_data)
    print("\n-------SETTING APPEARANCE -------")
    local appearance = unit.appearance

    -- Body / Body Part modifiers
    set_vector_to_map(appearance.body_modifiers, appearance_data.body_modifiers)
    print("body modifiers were set.")
    set_vector_to_map(appearance.bp_modifiers, appearance_data.bp_modifiers)
    print("bp modifiers were set.")

    appearance.size_modifier = appearance_data.size_modifier
    print(string.format("size_modifier set to %d.", appearance_data.size_modifier))

    -- Tissue-related data
    set_vector_to_map(appearance.tissue_style, appearance_data.tissue_style)
    set_vector_to_map(appearance.tissue_style_civ_id, appearance_data.tissue_style_civ_id)
    set_vector_to_map(appearance.tissue_style_id, appearance_data.tissue_style_id)
    set_vector_to_map(appearance.tissue_style_type, appearance_data.tissue_style_type)
    set_vector_to_map(appearance.tissue_length, appearance_data.tissue_length)
    print("tissue-data were set.")

    -- Colors
    set_vector_to_map(appearance.colors, appearance_data.colors)
    print("colors were set.")

    -- Genes
    set_vector_to_map(appearance.genes.appearance, appearance_data.genes.appearance)
    set_vector_to_map(appearance.genes.colors, appearance_data.genes.colors)
    print("genes were set.")
end

function get_belief_tier(strength)
    -- These ranges represent the bounds at which the description for a belief changes
    local tier_ranges = {
        {min = -50, max = -41}, 
        {min = -40, max = -26}, 
        {min = -25, max = -11}, 
        {min = -10, max = 10}, 
        {min = 11, max = 25}, 
        {min = 26, max = 40}, 
        {min = 41, max = 50}
    }
    
    local range = 1
    for index, data in ipairs(tier_ranges) do
        if strength >= data.min and strength <= data.max then
            range = index
            break
        end
    end
    return range
end

function get_cultural_belief(personality, belief_type)
    if personality.cultural_identity ~= -1 then
        return df.cultural_identity.find(personality.cultural_identity).values[belief_type]
    elseif personality.civ_id ~= -1 then
        return df.historical_entity.find(personality.civ_id).resources.values[belief_type]
    else 
        return 0
    end
end

function is_like_cultural_belief(personality, belief_type, belief_data)
    return get_belief_tier(belief_data.strength) == get_belief_tier(get_cultural_belief(personality, belief_type))
end


function remove_personal_belief(personality, belief_type)
    for i, value in ipairs(personality.values) do
        if value.type == belief_type then
            personality.values:erase(i)
        end
    end
end
    
function get_personal_belief(personality, belief_type)
    for i, value in ipairs(personality.values) do
        if value.type == belief_type then
            return value
        end
    end
    return nil
end

function add_or_update_personal_belief(personality, belief_type, belief_data)
    curr_belief = get_personal_belief(personality, belief_type)
    if not curr_belief then
        personality.values:insert("#", {new = true, type = belief_type, strength = belief_data.strength})
    else
        curr_belief.strength = belief_data.strength
    end
end

function set_personality(unit, personality_data)
    print("\n-------SETTING PERSONALITY -------")
    local personality = unit.status.current_soul.personality

    print("\n-- BELIEFS --")
    for id, belief_data in pairs(personality_data.values) do
        belief_type = tonumber(id)
        if is_like_cultural_belief(personality, belief_type, belief_data) then
            print(string.format("Imported belief %s was set to match unit's cultural value as the strengths are similar.", belief_data.name))
            remove_personal_belief(personality, belief_type)
        else
            print(string.format("Added/Updated personal belief %s with strength %d.", belief_data.name, belief_data.strength))
            add_or_update_personal_belief(personality, belief_type, belief_data)
        end
    end

    print("\n-- TRAITS --")
    for name, strength in pairs(personality_data.traits) do
        print(string.format("Setting trait %s to strength %d.", name, strength))
        personality.traits[name] = strength
    end

    print("\n-- DREAMS --")
    num_dreams = get_number_map_entries(personality_data.dreams)
    if num_dreams > #personality.dreams then
        -- TODO: Create new dream objects if we resize.
        print("Dreams could not be imported.")
    else
        personality.dreams:resize(num_dreams)
        curr_index = 0
        for id, dream_data in pairs(personality_data.dreams) do
            print(string.format("Adding dream with id %s and accomplished to %s", id, dream_data.accomplished))
            dream = personality.dreams[curr_index]
            dream.type = tonumber(id)
            dream.flags.accomplished = dream_data.accomplished
            curr_index = curr_index + 1
        end
    end
end

function set_attributes(attributes_to_replace, attributes_to_copy)
    for name, unit_attribute in pairs(attributes_to_replace) do
        value = attributes_to_copy[name].value
        max_value = attributes_to_copy[name].max_value

        print(string.format("Setting %s to value %d and max_value %d.", name, value, max_value))
        unit_attribute.value = value
        unit_attribute.max_value = max_value
    end
end

function set_body_attributes(unit, body_attributes)
    print("\n-------SETTING PHYSICAL ATTRIBUTES-------")
    set_attributes(unit.body.physical_attrs, body_attributes)
end

function set_mental_attributes(unit, mental_attributes)
    print("\n-------SETTING MENTAL ATTRIBUTES-------")
    set_attributes(unit.status.current_soul.mental_attrs, mental_attributes)
end

function find_skill_in_unit(unit, skill_id)
    for i, skill in ipairs(unit.status.current_soul.skills) do
        if skill.id == skill_id then
            return skill
        end
    end
    return nil
end

function set_skills(unit, skills)
    print("\n-------SETTING SKILLS-------")
    for id, skill in pairs(skills) do
        local skill_id = tonumber(id)
        local target_skill = find_skill_in_unit(unit, skill_id)
        print(
            string.format(
                "Setting %s to rating %d and experience %d.",
                skill.name,
                skill.rating,
                skill.experience
            )
        )
        if not target_skill then
            target_skill = df.unit_skill:new()
            target_skill.id = skill_id
            target_skill.rating = skill.rating
            target_skill.experience = skill.experience
            utils.insert_sorted(unit.status.current_soul.skills, target_skill, "id")
        else
            target_skill.rating = skill.rating
            target_skill.experience = skill.experience
        end
    end
end

function set_unit_data(target_unit, unit_data)
    target_unit.race = unit_data.race
    target_unit.sex = unit_data.sex
    target_unit.profession = unit_data.profession
    target_unit.profession2 = unit_data.profession2
    set_appearance(target_unit, unit_data.appearance)
    set_personality(target_unit, unit_data.personality)
    set_body_metadata(target_unit, unit_data.body_metadata)
    set_body_attributes(target_unit, unit_data.attributes)
    set_mental_attributes(target_unit, unit_data.attributes)
    set_skills(target_unit, unit_data.skills)
end

function import_adv()
    if #args ~= 1 then
        qerror("importadv requires exactly one argument: the path to the exported JSON file.")
    end
    local target_unit = df.global.world.units.active[0]
    local unit_data = json.decode_file(args[1])
    if unit_data.sex ~= target_unit.sex or unit_data.race ~= target_unit.race then
        -- TODO: Ideally, importadv should be able to import an adventurer regardless
        -- of race or sex. This may not be possible.
        qerror(
            "The adventurer being imported is not the same race and sex as the " ..
                "character currently active in adventure mode. Please create a character " ..
                    "with the same race and sex as the adventurer-to-be-imported."
        )
    end

    print("\nImporting data from adventurer " .. unit_data.name .. " ...")
    set_unit_data(target_unit, unit_data)
    print("\nDone!")
end

import_adv()
