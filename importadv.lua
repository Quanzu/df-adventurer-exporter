-- Import adventurer data from a JSON file generated by the exportadv script.
-- Script version: v0.2.1
-- For DF v0.47.05
--[====[

importadv
=============
Import adventurer data from a JSON file generated by the exportadv script.

Currently, this script only imports skills, attributes, and professions.
Future iterations will hopefully be able to import more data to more accurately
reconstruct an adventurer.

Simply enter adventure mode with your character and run this script!

Usage::

    importadv [FILEPATH]

]====]

local args = {...}

local json = require "json"
local utils = require "utils"

function set_body_metadata(unit, body_metadata)
    print("\n-------SETTING BODY METADATA -------\n")
    local body = unit.body
    body.blood_max = body_metadata.blood_max
    body.blood_count = body_metadata.blood_max
    body.weapon_bp = body_metadata.weapon_bp
    body.size_info.size_cur = body_metadata.size_info.size_cur
    body.size_info.size_base = body_metadata.size_info.size_base
    body.size_info.area_cur = body_metadata.size_info.area_cur
    body.size_info.area_base = body_metadata.size_info.area_base
    body.size_info.length_cur = body_metadata.size_info.length_cur
    body.size_info.length_base = body_metadata.size_info.length_base
end

function get_number_map_entries(map)
    count = 0
    for _ in pairs(map) do
        count = count + 1
    end
    return count
end

function set_vector_to_map(vector, map)
    map_size = get_number_map_entries(map)
    if #vector ~= map_size then
        vector:resize(map_size)
    end
    for i = 0, #vector - 1 do
        vector[i] = map[tostring(i)]
    end
end

function set_appearance(unit, appearance_data)
    print("\n-------SETTING APPEARANCE -------\n")
    local appearance = unit.appearance

    -- Body / Body Part modifiers
    set_vector_to_map(appearance.body_modifiers, appearance_data.body_modifiers)
    set_vector_to_map(appearance.bp_modifiers, appearance_data.bp_modifiers)
    appearance.size_modifier = appearance_data.size_modifier

    -- Tissue-related data
    set_vector_to_map(appearance.tissue_style, appearance_data.tissue_style)
    set_vector_to_map(appearance.tissue_style_civ_id, appearance_data.tissue_style_civ_id)
    set_vector_to_map(appearance.tissue_style_id, appearance_data.tissue_style_id)
    set_vector_to_map(appearance.tissue_style_type, appearance_data.tissue_style_type)
    set_vector_to_map(appearance.tissue_length, appearance_data.tissue_length)

    -- Colors
    set_vector_to_map(appearance.colors, appearance_data.colors)

    -- Genes
    set_vector_to_map(appearance.genes.appearance, appearance_data.genes.appearance)
    set_vector_to_map(appearance.genes.colors, appearance_data.genes.colors)
end

function set_attributes(attributes_to_replace, attributes_to_copy)
    for name, unit_attribute in pairs(attributes_to_replace) do
        value = attributes_to_copy[name].value
        max_value = attributes_to_copy[name].max_value

        print(string.format("Setting %s to value %d and max_value %d.", name, value, max_value))
        unit_attribute.value = value
        unit_attribute.max_value = max_value
    end
end

function set_body_attributes(unit, body_attributes)
    print("\n-------SETTING PHYSICAL ATTRIBUTES-------")
    set_attributes(unit.body.physical_attrs, body_attributes)
end

function set_mental_attributes(unit, mental_attributes)
    print("\n-------SETTING MENTAL ATTRIBUTES-------")
    set_attributes(unit.status.current_soul.mental_attrs, mental_attributes)
end

function skill_id_to_name(target_id)
    for id, name in ipairs(df.job_skill) do
        if id == target_id then
            return name
        end
    end
    return "UNKNOWN"
end

function find_skill_in_unit(unit, skill_id)
    for i, skill in ipairs(unit.status.current_soul.skills) do
        if skill.id == skill_id then
            return skill
        end
    end
    return nil
end

function set_skill_data(unit, skills)
    print("\n-------SETTING SKILLS-------")
    for id, skill in pairs(skills) do
        local skill_id = tonumber(id)
        local target_skill = find_skill_in_unit(unit, skill_id)
        print(
            string.format(
                "Setting %s to rating %d and experience %d.",
                skill_id_to_name(skill_id),
                skill.rating,
                skill.experience
            )
        )
        if not target_skill then
            target_skill = df.unit_skill:new()
            target_skill.id = skill_id
            target_skill.rating = skill.rating
            target_skill.experience = skill.experience
            utils.insert_sorted(unit.status.current_soul.skills, target_skill, "id")
        else
            target_skill.rating = skill.rating
            target_skill.experience = skill.experience
        end
    end
end

function set_unit_data(target_unit, unit_data)
    target_unit.race = unit_data.race
    target_unit.sex = unit_data.sex
    target_unit.profession = unit_data.profession
    target_unit.profession2 = unit_data.profession2
    set_appearance(target_unit, unit_data.appearance)
    set_body_metadata(target_unit, unit_data.body_metadata)
    set_body_attributes(target_unit, unit_data.attributes)
    set_mental_attributes(target_unit, unit_data.attributes)
    set_skill_data(target_unit, unit_data.skills)
end

function import_adv()
    if #args ~= 1 then
        qerror("importadv requires exactly one argument: the path to the exported JSON file.")
    end
    local target_unit = df.global.world.units.active[0]
    local unit_data = json.decode_file(args[1])
    if unit_data.race ~= target_unit.race then
        -- TODO: Ideally, importadv should be able to import that adventurer regardless
        -- of race or sex.
        qerror(
            "The adventurer being imported is not the same race and sex as the " ..
                "character currently active in adventure mode. Please create a character " ..
                    "with the same race and sex as the adventurer-to-be-imported."
        )
    end

    print("\nImporting data from adventurer " .. unit_data.name .. " ...")
    set_unit_data(target_unit, unit_data)
    print("\nDone!")
end

import_adv()
